package team5;

import team5.Member;

import static team5.Utils.*;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;

import team5.MemberService;
import team5.Utils;

public class MemberServiceImpl implements MemberService {
	/*
	 * @Author 고은채
	 * 
	 * @Since 23/02/08
	 * 
	 * 싱글톤 처리
	 * 회원가입, 로그인 담당 
	 * 회원 삭제, 회원 수정 메서드 추가
	 * 
	 * 고객 주소의 경도 위도를 받아오는 메서드 (kakao api)
	 * 
	 * 23/02/12
	 * 싱글톤 다시 수정 / modify(), remove() 추가
	 * 파일 영속화 작업 (파일 저장하는 save() 추가)
	 * 
	 */
	
	public List<Member> members = new ArrayList<Member>();
	double x;
	double y;
	static boolean run = true;
	
	//싱글톤 처리
	private static MemberServiceImpl memberService = new MemberServiceImpl(); //인스턴스 생성, 클래스가 로드될 때 1번 실행
	
	public MemberServiceImpl() {   } //생성자 생성
	
	public static MemberService getInstance() {
		return memberService;
	} //  메소드 생성
	
	MemberService ms = MemberServiceImpl.getInstance();
	private Member loginUser;
	{
		try(ObjectInputStream ois = new ObjectInputStream(new FileInputStream("member.ser"))) {
			members = (List<Member>) ois.readObject();
		}catch (FileNotFoundException e) {
		//인스턴스 초기화 블록을 이용해서 더미 고객 데이터 사용
		members.add(new Member("홍길동", "hong", "abcd1234", "서울 구로구", "01012345675", 1234456, 1234));
		members.add(new Member("고길동", "ko", "abcd1234", "인천 부평구", "01012345676", 324,5452));
		members.add(new Member("이길동", "lee", "abcd12345", "서울 마포구", "01012345677",4242,6342));
		members.add(new Member("김길동", "kim", "abcd12346", "경기도 안성시", "01012345678",343425,645));
	}catch (ClassNotFoundException | IOException e) {
		e.printStackTrace();
	}
}
		
	public Member getLoginUser() {
		return loginUser;
	}
	
	
	// 회원 등록 메서드
	public void register() throws UnsupportedEncodingException, Exception {
		
		System.out.println("=====================회원가입====================");
		String name = Utils.nextLine("귀하의 이름을 입력하세요 :");
		String userID = Utils.nextLine("사용할 아이디를 입력하세요 :"); //영어 + 숫자
		
		//중복된 아이디 등록 방지
		if(checkID(userID) != null) {
			System.out.println("중복 아이디가 존재합니다.");
			return;
		}
		
		String password = Utils.nextLine("사용할 비밀번호를 입력하세요 :"); //영어 + 숫자
		String addr = Utils.nextLine("주소를 입력하세요 :");
		findAddress(addr);
		
		String phoneNum = Utils.nextLine("전화번호를 입력하세요 :");
		//중복된 전화번호 등록 방지
		if(checkPhoneNum(phoneNum) != null) {
			System.out.println("현재 전화번호는 사용 중입니다");
			return;
		}
		
		Member member = new Member(name, userID, password, addr, phoneNum, x, y);
		members.add(member);
		save();
//		System.out.println(member.getX());
//		System.out.println(member.getY());
		System.out.println( name + "님 가입을 축하합니다.");
		System.out.println( members.size() + "번째 회원이 되셨습니다");
		Memberlist();
	}
	
	
	//findBY - ID
	public Member checkID(String userID) {
		Member member = null;
		for (int i = 0 ; i < members.size() ; i++) {
			System.out.println(members.get(i).getUserID());
			if (members.get(i).getUserID().equals(userID)) {
				member = members.get(i);
				//System.out.println(member.getUserID());
				break;
			}
		}
		return member;
	}
		
	
	//findBY2 - PhoneNum
	public Member checkPhoneNum(String phoneNum) {
		Member member = null;
		for (int i = 0 ; i < members.size() ; i++) {
			if (members.get(i).getPhoneNum().equals(phoneNum)) {
				member = members.get(i);
				break;
			}
		}
		return member;
	}
		
	
	
	// 회원정보 저장 (파일 저장 메소드)
	public void save() {
		try(ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("member.ser"))) {
			oos.writeObject(members); //students list의 내용을 파일화
		}catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	
	// 회원정보 수정
	public void modify() {
		Member member = checkID(Utils.nextLine("아이디를 입력하세요"));
		
		if (member == null) {
			System.out.println("존재하지 않은 아이디입니다");
			return;
		}
		
		//입력한 아이디가 존재할 때
		switch (Utils.nextInt("1. 비밀번호 수정  2. 주소 수정 ")) {
		case 1:
			member.setName(Utils.nextLine("본래 비밀번호를 입력하세요"));
			
			break;
		
		case 2:
			member.setName(Utils.nextLine("변경할 주소를 입력하세요 (도로명주소 기입)"));
			break;
		}
	}
		
	
	
	
	
	// 회원정보 삭제
	public void remove() {
		
		
	}	
	
	
	
	//회원정보 상세조회 (단일조회)
	public void Memberlist() {
		System.out.println("회원가입한 고객의 정보");
		System.out.println("=================================================");
		for(int i = 0 ; i < members.size() ; i++) {
			System.out.println(members.get(i));
		}
	}

	
	
	
	// 회원 로그인
	public void login() {
		loginUser = members.get(0);
		String userID = Utils.nextLine("아이디를 입력하세요 : ");
		String pw = Utils.nextLine("비밀번호를 입력하세요 : ");
		
		Member member = checkID(userID);
		System.out.println(member.getUserID());
		
		MemberService ms = MemberServiceImpl.getInstance();
		System.out.println(ms.getLoginUser().getUserID());
		System.out.println("main :: " + ms);
		//new BoardServiceimpl().register();
		
//		if(member == null) {
//			System.out.println("등록되지 않은 id입니다.");
//		} else if(member.getPassword().equals(pw)) {
//			System.out.println("[" + member.getUserID() + "]님께서 로그인하셨습니다.");
//		} else {
//			System.out.println("비밀번호가 틀렸습니다.");
//		}
	}
	
	
//	private Member FindById(String InputuserID) {
//		for(Member member : members) {
//			if(member.getUserID().equals(InputuserID)) {
//				return member;
//			}
//		}
//		return null;
//	}
	
	
	
	
		
		
//		
//		for (int i = 0 ; i < members.size() ; i++) {
//			if (InputUserID == members.get(i).getUserID()) {
//				String InputPassword = Utils.nextLine("비밀번호를 입력하세요 : ");
//			} else {
//				System.out.println("아이디를 확인해주세요");
//				return;
//				}
//				
//				for (int j = 0 ; j < members.size() ; j++) {
//					if (InputPassword == members.get(j).getPassword()) {
//						System.out.println(members.get(i).getName() +" 님 로그인 되었습니다.");}
//						
//			
//					else {
//						System.out.println("잘못 입력하셨습니다");
//						return;
//						}
//					}
		
	
//	public static void main(String[] args) {
//		MemberServiceImpl member = new MemberServiceImpl();
//		
//		member.register();
//		//member.list();
//		
//		member.login();
//		
//		//getJSONData();
//	}



	
	
	//주소 받아오는 메서드 (경위도, 찐주소)
	/**
	 * REST API로 통신하여 받은 JSON형태의 데이터를 String으로 받아오는 메소드
	 */
	private static String getJSONData(String apiUrl) throws Exception {
		HttpURLConnection conn = null;
		StringBuffer response = new StringBuffer();

		// 인증키 - KakaoAK하고 한 칸 띄워주셔야해요!
		String auth = "KakaoAK " + "76c9fa0756bb5338d1a0525094fca785";

		// URL 설정
		URL url = new URL(apiUrl);

		conn = (HttpURLConnection) url.openConnection();

		// Request 형식 설정
		conn.setRequestMethod("GET");
		conn.setRequestProperty("X-Requested-With", "curl");
		conn.setRequestProperty("Authorization", auth);

		// request에 JSON data 준비
		conn.setDoOutput(true);

		// 보내고 결과값 받기
		int responseCode = conn.getResponseCode();
		if (responseCode == 400) {
			System.out.println("400:: 해당 명령을 실행할 수 없음");
		} else if (responseCode == 401) {
			System.out.println("401:: Authorization가 잘못됨");
		} else if (responseCode == 500) {
			System.out.println("500:: 서버 에러, 문의 필요");
		} else { // 성공 후 응답 JSON 데이터받기

			Charset charset = Charset.forName("UTF-8");
			BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), charset));

			String inputLine;
			while ((inputLine = br.readLine()) != null) {
				response.append(inputLine);
				
			}			
		}
		return response.toString();
	}
	
	
	public void findAddress(String addr) throws UnsupportedEncodingException, Exception {
		// 검색 갯수
		int size = 30;
		
		// 검색 키워드
		String keyword = addr;
		
		String result = getJSONData(String.format("https://dapi.kakao.com/v2/local/search/address.json?query=%s&size=%d", URLEncoder.encode(keyword, "utf-8"), size));
		Gson gson = new Gson();
		Map<String, ?> map = gson.fromJson(result, Map.class);
		
		((List<?>)(map.get("documents"))).forEach(o -> {
			if(o instanceof Map) {
				Map<String, ?> m = (Map<String, ?>)o;
				//System.out.println(m.get("road_address"));
				m = (Map<String, ?>)m.get("road_address");
				x = Double.valueOf(String.valueOf(m.get("x")));
				y = Double.valueOf(String.valueOf(m.get("y")));
				
			
				
//				System.out.println(m.get("address_name"));
//				System.out.println(m.get("x"));
//				System.out.println(m.get("y"));
			}
		});
	}
	
	
	
	
	
	//테스트용 메인
	public static void main(String[] args) {
		
		while(run) {
			try {
				run();
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
		public static void run() throws UnsupportedEncodingException, Exception {
			MemberServiceImpl m = new MemberServiceImpl();
			MemberService ms = MemberServiceImpl.getInstance();
//			System.out.println(ms.getLoginUser().getUserID());
//			System.out.println("main :: " + ms);
//			new BoardServiceimpl().register();
			
			int input = Utils.nextInt("1. 회원가입	 2. 로그인  3. 회원정보수정");
			switch (input) {
				case 1:
					m.register();
				case 2:
					ms.login();
					break;
				case 3:
					m.modify();
					break;
				case 4:
					run = false;
					break;
			
			}
		}
	}


