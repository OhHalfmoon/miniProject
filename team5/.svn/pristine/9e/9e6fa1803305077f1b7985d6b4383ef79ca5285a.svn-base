package team5.service;

import static team5.util.Utils.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import team5.vo.Product;
import team5.vo.Review;

public class ReviewServiceImpl implements ReviewService {
	/**
	 * @Author:우성준
	 * 
	 * @Since 23/02/08 후기기능담당클래스
	 * 
	 *        IOstream추가, 싱글톤추가, 메소드 지역변수추가(String writer) 멤버서비스 및 오더서비스 필요
	 * 
	 *        상품별 글번호 추가
	 *
	 */

	List<Review> reviewList = new ArrayList<Review>();
	ProductService ps;
	OrderService os;
	private Long rno = 1L;

	private static ReviewService reviewService = new ReviewServiceImpl();// 인스턴스 생성, 클래스가 로드 될때 1번 실행//

	private ReviewServiceImpl() {
	} // 생성자

	// 메소드
	public static ReviewService getInstance() {
		return reviewService;
	}

	{
		try (ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("Review.ser"))) {
			reviewList = (List<Review>) inputStream.readObject();
		} catch (FileNotFoundException e) {
			reviewList.add(new Review(1L, 1001, "너무 멋있어요!", new Date(), "sj", true));
			reviewList.add(new Review(2L, 1001, "입을만 해요", new Date(), "pp", true));
			reviewList.add(new Review(3L, 1001, "그럭저럭...", new Date(), "ap", true));
			reviewList.add(new Review(4L, 1001, "JAVAMAN", new Date(), "sh", true));
			reviewList.add(new Review(5L, 1001, "힘들어......", new Date(), "ec", true));
			reviewList.add(new Review(6L, 1001, "살려줘;;", new Date(), "dg", true));
			reviewList.add(new Review(7L, 1001, "다음에도 또 살 것 같아요^^", new Date(), "yl", true));
			reviewList.add(new Review(8L, 1001, "hahahahaha!!!!!", new Date(), "jm", true));
			reviewList.add(new Review(9L, 1001, "오졌죠 화이팅!!", new Date(), "sm", true));
			reviewList.add(new Review(10L, 1001, "기장이 생각보다 짧아요..", new Date(), "rm", true));
			reviewList.add(new Review(11L, 1001, "good!", new Date(), "aa", true));
			save();

		} catch (ClassNotFoundException | IOException e) {
			e.printStackTrace();
		}
	}

//	후기등록
	@Override
	public void register(String writer, int proId) {
		os = OrderServiceImpl.getInstance();
		if (os.findByOrder(writer, proId) == null || checkDuplicatian(writer, proId) == true) {
			System.err.println("접근권한이 없습니다");
			return;
		}
		ps = ProductServiceImpl.getInstance();
		String s = nextLine("후기를 입력하세요 >");
		rno = ps.findBy(proId).getRnoCnt() + 1L;
		Review r = new Review(rno, proId, s, new Date(), writer, true);
		ps.findBy(proId).setRnoCnt(rno);
		reviewList.add(r);
		save();
	}

//	후기삭제
	@Override
	public void remove(String writer, int proId) {
		os = OrderServiceImpl.getInstance();
		if (os.findByOrder(writer, proId) == null || checkDuplicatian(writer, proId) == true) {
			System.err.println("접근권한이 없습니다");
			return;
		}
		ps = ProductServiceImpl.getInstance();
		rno = ps.findBy(proId).getRnoCnt();
		reviewList.remove(proId);
		ps.findBy(proId).setRnoCnt(--rno);
		save();
	}

//	상품별 후기리스트
	@Override
	public void reviewList(int proId) {
//		int pageSize = 10;
//	    int page = 0;
//	    int start = page * pageSize;
//        int end = start + pageSize;
//        if (end > ReviewList.size()) {
//           end = ReviewList.size();
//        }
		System.out.println();
		System.out.println("후기");
		System.out.println(
				"---------------------------------------------------------------------------------------------------");
		Collection<Review> cup = reviewList;
		for (Review r : cup) {
			System.out.println(r);

			System.out.println(
					"---------------------------------------------------------------------------------------------------");
		}

//		if (choice == 1) {
//            page++;
//            if (page * pageSize >= ReviewList.size()) {
//               page--;
//            }
//         } else if (choice == 2) {
//            page--;
//            if (page < 0) {
//               page = 0;
//            }
//         }
	}

	public Review findBy(String writer, int proId) {
		Review review = null;
		for (int i = 0; i < reviewList.size(); i++) {
			if (reviewList.get(i).getWriter().equals(writer) && reviewList.get(i).getProId() == proId) {
				review = reviewList.get(i);
				break;
			}
		}
		return review;
	}

	public boolean checkDuplicatian(String writer, int proId) {
		if (findBy(writer, proId) == null) 
			return false;
		else
			return true;
	}

	public void save() {
		try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("review.ser"))) {
			objectOutputStream.writeObject(reviewList);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

//	@Override
//	public List<Review> findByProId(int proId) {
//		System.out.println(ReviewList.size());
//		for(int i = 0; i < ReviewList.size(); i++){
//			if(ReviewList.get(i).getProId()==proId)
//			reviews.add(ReviewList.get(0));
//		}
//		System.out.println(reviews);
//		return reviews;
//	}

	public static void main(String[] args) {
		ReviewServiceImpl impl = new ReviewServiceImpl();

		impl.register("sj", 1001);
		impl.reviewList(1001);
		impl.register("abc", 1001);
		impl.reviewList(1001);
		impl.register("abc", 1001);
		impl.reviewList(1001);
//		impl.register("abc", 1001);
//		impl.register("sh", 1001);
//		impl.register("ec", 1001);
//		impl.register("jm", 3000);
//		impl.register("pp", 2002);
//		impl.register("ap", 2002);
//		impl.reviewList(2002);
//		impl.reviewList(3000);

//		int choice = nextInt("1. 다음 2. 이전");
//		impl.reviewList(1001);
//		choice = nextInt("1. 다음 2. 이전");
//		impl.reviewList(1001);
	}

}
